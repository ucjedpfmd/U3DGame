//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18052
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
namespace AssemblyCSharp
{
		public class SmoothFollow : MonoBehaviour
		{
				public SmoothFollow ()
				{
				}		
		        // The target we are following
		        public Transform target;
		        // The distance in the x-z plane to the target
		        public float distance = 10;
		        // the height we want the camera to be above the target
		        public float height = 5;
		        // How much we 
		        public float heightDamping = 2;
		        public float rotationDamping = 3;
			    void LateUpdate () {
					LoopManager.update();
				    // Early out if we don't have a target
				    if (!target)
					    return;
				
				    // Calculate the current rotation angles
				    float wantedRotationAngle = target.eulerAngles.y;
				    float wantedHeight = target.position.y + height;
				
				    float currentRotationAngle = transform.eulerAngles.y;
				    float currentHeight = transform.position.y;
				
				    // Damp the rotation around the y-axis
				    currentRotationAngle = Mathf.LerpAngle (currentRotationAngle, wantedRotationAngle, rotationDamping * Time.deltaTime);
				
				    // Damp the height
				    currentHeight = Mathf.Lerp (currentHeight, wantedHeight, heightDamping * Time.deltaTime);
				
				    // Convert the angle into a rotation
				
				    //下面是原始代码。
				
				    //var currentRotation = Quaternion.Euler (0, currentRotationAngle, 0);
				
				
				
				    //这里是我修改的，直接让它等于1，
				
				    //摄像机就不会旋转。
				
				    float currentRotation = 1;
				
				
				    // Set the position of the camera on the x-z plane to:
				    // distance meters behind the target
				    //transform.position = target.position;
                    Vector3 pos = target.position;
                    pos -= currentRotation * Vector3.forward * distance;
                    pos.y = currentHeight;
				    // Set the height of the camera
                    transform.position = pos;
				   
				
				    // Always look at the target
				    transform.LookAt (target);
			    }
		}
}

